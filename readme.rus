МОДЕЛИ:
	user
		содержит информацию о неком коммитере, такую как полное имя,
		емайл, и короткое имя (nickname). nickmake используется в конфигурационном файле
		и обычно должен содержать только латинские буквы и цифры, без пробелов.
		Имеет множество ssh ключей для доступа к репозиториям, которые задаются в моделе ssh_keys.

	ssh_keys
		состоит из ключа (public ssh) и связи с user many2one.

	Repository_System
		задается GIT URL для доступа к админскому репозиторию, например ssh://git@example.com/gitosis-admin.git
		задается приватный ssh ключ, для доступа к этому репозиторию.
		задается тип системы управления репозиторием. к примеру gitosis или gitolite.
		gitolite пока не поддерживается, однако есть в задумках. вообще изначально он и был в задумках,
		на gitosis как то скатилось само.
		Имеет множество репозиториев, которые являются экземлярами модели git_repository

	git_repository
		состоит из имени, которое используется в конфиге (поэтому ограничено латинским алфавитом)
		и связи с Repository_System many2one.
		Так же имеет множество обьектов типа access, которые определяют права доступа для юзеров к 
		этому репозиторию.

	access
		Определяет доступ конкретного коммитера к конкретному репозиторию.
		Имеет связь many2one и к git_repository и к user.


ЮЗЕР ИНТЕРФЕЙС:
	Интерфейс администрироания реализован через django.contrib.admin.
	Явно можно редактировать модели user, git_repository, Repository_System.
	ssh_keys and access представлены как formset для моделей user and git_repository соответственно.

ОЖИДАЕМАЯ РЕАКЦИЯ:
	Первоначально у вас уже должен быть установлен gitosis где то.
	gitosis при инсталяции спрашивает какой ключ будет использован для доступа к админскому
	репозиторию gitosis-admin.git. этот же ключ мы и будем использовать в нашей системе.
	После того, как вы зашли в админку, вы должны видеть три нужные модели:
		Repository System
		Git Repository
		Users
	
	Давайте добавим наш сервер гитосиса в эту систему.
		заходим в Repository System и нажимаем Add Repository System.
		в поле 'URL to admin repo' вводим git url до своего гитосиса. к примеру это будет
		ssh://git@example.com/gitosis-admin.git
		В поле 'access key' вставляем приватную часть ssh ключа, который использовался при создании
		репозитория gitosis-admin.git.
		ВЫбираем Engine - gitosis.
		Нажимаем кнопочку Save.
			В этот момент система делает git fetch репозитория гитосиса,
			читает полученный конфиг gitosis.conf и импортирует список репозиториев и юзеров.
			Так же создаются access связи юзеров с репозиториями на основании этого конфига.
			из keydir импортируются ключи коммитеров (пользователей).
		Если все прошло успешно, вы увидите сообщения типа success.
		Если случилась какая-нибудь ошибка, вы увидите сообщение типа error с текстом ошибки.
		Обычно ошибки могут быть связаны с недоступностью гитосис репозитория.
		Чтобы корректно закончить импорт гитосис репозитория необходимо делать re-save этого 
		объекта до тех пор, пока ошибки не перестанут появляться.
		в Git Repository and Users должны появится данные, которые были импортированы.

	Создание юзеров (коммитеров) и репозиториев должно происходить нативно ;)

	Если вы получили какую-нибудь ошибку на операции Save, то вы должны предпринять действия к
	устранению причин возникновения этой ошибки и сделать re-Save нужного обьекта.
	Если вы не знаете как устранить ошибку, или что это ошибка означает, вы можете
	написать авторам или разместить баг в трекере, желательно с описанием ваших действий 
	перед возникновение бага. чем подробнее вы опишите проблему, тем авторам будет легче ее понять.


КАК ИНСТАЛИРОВАТЬ:
	Это проект, написанный с использованием библиотек django. (http://djangoproject.org)
	Как инсталировать django можно найти на официальном сайте.
	Как запускать django приложение можно найти там же.
	
	tips: 
		сперва можно проверить работоспособность с использованием встроенного в django
		веб сервера. в этом случае приложение будет запускаться так: ./manage.py runserver

		Перед запуском не забудте в settings.py изменить настройки сервера баз данных.

		Перед запуском приложения не забудте сделать ./manage.py syncdb. таким образом 
		создается схема базы данных для приложения и первоначально необходиные данные.

